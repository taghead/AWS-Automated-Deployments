version: 2.1
commands:
  setup-cd:
    steps:
    - run: 
        name: Configure environment
        command: |
          # install terraform
          curl -o terraform.zip https://releases.hashicorp.com/terraform/0.12.24/terraform_0.12.24_linux_amd64.zip
          sudo unzip terraform.zip -d /usr/local/bin/
          
          # install helm
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

          # install kubectl
          curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
          chmod +x ./kubectl 
          sudo mv ./kubectl /usr/local/bin/kubectl

          # configure kops
          curl -LO https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
          chmod +x kops-linux-amd64
          sudo mv kops-linux-amd64 /usr/local/bin/kops
          kops export kubecfg rmit.k8s.local --state s3://rmit-kops-state-l7m1v7
  setup-cd-e2e:
    steps:
    - run: 
        name: Configure environment
        command: |
          # install unzip
          apt update
          apt install unzip

          # install terraform
          curl -o terraform.zip https://releases.hashicorp.com/terraform/0.12.24/terraform_0.12.24_linux_amd64.zip
          unzip terraform.zip -d /usr/local/bin/

          # install kubectl
          curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
          chmod +x ./kubectl 
          mv ./kubectl /usr/local/bin/kubectl

          # configure kops
          curl -LO https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
          chmod +x kops-linux-amd64
          mv kops-linux-amd64 /usr/local/bin/kops
          kops export kubecfg rmit.k8s.local --state s3://rmit-kops-state-l7m1v7

          cd src
          npm install 
          apt update
          apt install postgresql-client-10 -y

jobs:
  e2e:
    docker:
      - image: qawolf/qawolf:v0.9.2
      - image: postgres:10.7
        environment:
          POSTGRES_PASSWORD: password
    environment:
      QAW_HEADLESS: true
      DB_USERNAME: $db_user
      DB_PASSWORD: $db_pass
      DB_NAME: servian
      DB_HOSTNAME: localhost
      ENV: test

    steps: 
      - checkout
      - setup-cd-e2e
      - run: 
          name: End 2 end tests
          no_output_timeout: 2m
          command: |
            cd infra; make init; export DB_HOSTNAME=$(terraform output endpoint); cd ..;
            export ENDPOINT="http://$(kubectl get service/acme -n test -o=yaml | grep hostname | cut -d: -f2- | sed -e 's/^[ \t]*//'):80"
            echo $ENDPOINT
            echo $DB_HOSTNAME

            cd src
            npm run start & 
            npx wait-on $ENDPOINT
            npm run test-e2e

  package:
    machine: true
    environment:
      ECR: 474697412445.dkr.ecr.us-east-1.amazonaws.com
      reponame: app
      NODE_ENV: production
    steps:
      - checkout
      - run:
          name: Set up
          command: |
            mkdir -p artifacts

            # install AWS CLI
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

            # instll helm
            curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
      
      - run: 
          name: Build image
          command: |
            cd src
            export IMAGE_TAG=${ECR}/${reponame}:${CIRCLE_SHA1}
            echo ${IMAGE_TAG} > ../artifacts/image.txt
            docker build -t ${IMAGE_TAG} .
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECR}
            docker push ${IMAGE_TAG}

      - run:
          name: Package helm
          command: | 
            helm package helm/acme --app-version ${CIRCLE_SHA1} -d artifacts 
            
      - run:
          name: Package infra
          command: |
            cp -r infra artifacts/infra

      - persist_to_workspace:
          root: ./
          paths:
            - artifacts

  deploy-helm-test:
    docker:
     - image: cimg/base:2020.01 
    environment:
      ENV: test
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - setup-cd
      - run: 
          name: Deploy to Test Cluster 
          command: |
            kubectl create namespace $ENV
            cd infra; make init; 
            make up; 
            export dbhost_endpoint=$(terraform output endpoint); cd ..;

            export docker_image="$(cat ./artifacts/image.txt)"
            
            helm upgrade acme artifacts/acme-*.tgz -i --wait -n $ENV --set dbhost=${dbhost_endpoint},image=${docker_image},dbname=$db_name,dbuser=$db_user,dbpass=$db_pass
            
            kubectl exec deployment/acme -n ${ENV} -- node_modules/.bin/sequelize db:migrate 
            
            helm list -n $ENV
            kubectl get services -n $ENV
            kubectl get pods -n $ENV

      - persist_to_workspace:
          root: ./
          paths:
            - artifacts

workflows:
  version: 2
  build-test-package:
    jobs:
      - package
      - deploy-helm-test:
          requires: 
            - package
      - e2e:
          requires:
            - package
            - deploy-helm-test
#          filters:
#            branches:
#              only: master